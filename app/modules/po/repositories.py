from db import *

def get_all_po():
    query = """
        SELECT PO_HEADER_ID, SEGMENT1 PO_NUMBER FROM PO_HEADERS_ALL WHERE ATTRIBUTE2 NOT IN ('QUOTAION', 'EXP')
        AND AUTHORIZATION_STATUS NOT IN ('INCOMPLETE', 'IN PROCESS')
        AND AUTHORIZATION_STATUS IS NOT NULL
        ORDER BY CREATION_DATE DESC, SEGMENT1 DESC
    """
    return execute_query(query=query, fetch='all')

def get_po_by_number(po):
    bind_vars = {
        'po_header_id': po,
    }
    query = """
        SELECT POH.PO_HEADER_ID,
         POH.SEGMENT1 PO_NUMBER,
         POH.CREATION_DATE,
         HE.LAST_NAME BUYER,
         PV.VENDOR_NAME supplier,
         FLV.DESCRIPTION TYPE,
         PVSA.VENDOR_SITE_CODE,
         HRL1.LOCATION_CODE SHIP_TO_LOCATION,
         HRL2.LOCATION_CODE BILL_TO_LOCATION,
         POH.CURRENCY_CODE,
         PO_HEADERS_SV3.GET_PO_STATUS (POH.PO_HEADER_ID) STATUS,
         SUM (PLA.UNIT_PRICE * PLA.QUANTITY) TOTAL_AMOUNT,
         POH.ORG_ID ORG_ID,
         POH.STYLE_ID STYLE_ID,
         POH.LOCK_OWNER_ROLE LOCK_OWNER_ROLE,
         POH.LOCK_OWNER_USER_ID LOCK_OWNER_USER_ID,
         POH.ENABLE_ALL_SITES ENABLE_ALL_SITES
    FROM PO_HEADERS_ALL POH,
         PO_LINES_ALL PLA,
         HR_EMPLOYEES HE,
         PO_VENDORS PV,
         fnd_lookup_values FLV,
         PO_VENDOR_SITES_ALL PVSA,
         HR_LOCATIONS_ALL_TL HRL1,
         HR_LOCATIONS_ALL_TL HRL2
   WHERE     1 = 1
         AND POH.PO_HEADER_ID = PLA.PO_HEADER_ID
         AND POH.AGENT_ID = HE.EMPLOYEE_ID
         AND POH.VENDOR_ID = PV.VENDOR_ID
         AND POH.TYPE_LOOKUP_CODE = FLV.LOOKUP_CODE
         AND POH.VENDOR_SITE_ID = PVSA.VENDOR_SITE_ID
         AND FLV.LOOKUP_TYPE = 'PO TYPE'
         AND HRL1.LOCATION_ID(+) = POH.SHIP_TO_LOCATION_ID
         AND HRL1.LANGUAGE(+) = USERENV ('LANG')
         AND HRL2.LOCATION_ID(+) = POH.BILL_TO_LOCATION_ID
         AND HRL2.LANGUAGE(+) = USERENV ('LANG')
         AND POH.PO_HEADER_ID = :po_header_id
GROUP BY POH.PO_HEADER_ID,
         POH.SEGMENT1,
         POH.CREATION_DATE,
         HE.LAST_NAME,
         PV.VENDOR_NAME,
         FLV.DESCRIPTION,
         PVSA.VENDOR_SITE_CODE,
         HRL1.LOCATION_CODE,
         HRL2.LOCATION_CODE,
         POH.CURRENCY_CODE,
         POH.ORG_ID,
         POH.STYLE_ID,
         POH.LOCK_OWNER_ROLE,
         POH.LOCK_OWNER_USER_ID,
         POH.ENABLE_ALL_SITES
        """
    return execute_query(query=query, fetch='one', bind_vars=bind_vars)

def get_po_lines_by_po(po_header_id):
    bind_vars = {
        'po_header_id': po_header_id,
    }
    query = """
        SELECT POL.PO_LINE_ID,
        POL.LAST_UPDATE_DATE,
        POL.LAST_UPDATED_BY,
        POL.CREATION_DATE,
        POL.CREATED_BY,
        POL.LAST_UPDATE_LOGIN,
        POL.REQUEST_ID,
        POL.PROGRAM_APPLICATION_ID,
        POL.PROGRAM_ID,
        POL.PROGRAM_UPDATE_DATE,
        POL.PO_HEADER_ID,
        POL.LINE_TYPE_ID,
        POL.LINE_NUM,
        PLTT.LINE_TYPE,
        POL.ITEM_ID,
        MSI.SEGMENT1 ITEM_NUMBER,
        POL.ITEM_REVISION,
        MCB.SEGMENT1 CATEGORY,
        DECODE (
        POL.ITEM_ID,
        NULL, POL.ITEM_DESCRIPTION,
        DECODE (MSI.ALLOW_ITEM_DESC_UPDATE_FLAG,
                'Y', POL.ITEM_DESCRIPTION,
                MSIT.DESCRIPTION))
        ITEM_DESCRIPTION,
        POL.UNIT_MEAS_LOOKUP_CODE,
        POL.QUANTITY_COMMITTED,
        POL.COMMITTED_AMOUNT,
        POL.ALLOW_PRICE_OVERRIDE_FLAG,
        POL.NOT_TO_EXCEED_PRICE,
        POL.LIST_PRICE_PER_UNIT,
        POL.UNIT_PRICE,
        POL.QUANTITY,
        POL.VENDOR_PRODUCT_NUM,
        POL.UN_NUMBER_ID,
        POUN.UN_NUMBER,
        POL.HAZARD_CLASS_ID,
        PHC.HAZARD_CLASS,
        POL.MIN_ORDER_QUANTITY,
        POL.MAX_ORDER_QUANTITY,
        POL.QTY_RCV_TOLERANCE,
        POL.OVER_TOLERANCE_ERROR_FLAG,
        POL.MARKET_PRICE,
        POL.UNORDERED_FLAG,
        POL.CLOSED_FLAG,
        POL.USER_HOLD_FLAG,
        POL.CANCEL_FLAG,
        POL.CANCELLED_BY,
        POL.CANCEL_DATE,
        POL.CANCEL_REASON,
        POL.FIRM_STATUS_LOOKUP_CODE,
        POL.FIRM_DATE,
        POL.CONTRACT_NUM,
        POL.NOTE_TO_VENDOR,
        POL.FROM_HEADER_ID,
        POL.FROM_LINE_ID,
        POL.TAXABLE_FLAG,
        POL.TYPE_1099,
        POL.CAPITAL_EXPENSE_FLAG,
        POL.NEGOTIATED_BY_PREPARER_FLAG,
        POL.MIN_RELEASE_AMOUNT,
        POL.PRICE_TYPE_LOOKUP_CODE,
        POL.PRICE_BREAK_LOOKUP_CODE,
        PLTB.ORDER_TYPE_LOOKUP_CODE,
        NVL (PLTB.OUTSIDE_OPERATION_FLAG, 'N'),
        POL.TRANSACTION_REASON_CODE,
        POL.CLOSED_BY,
        POL.CLOSED_DATE,
        POL.CLOSED_CODE,
        POL.CLOSED_REASON,
        POL.GOVERNMENT_CONTEXT,
        POL.USSGL_TRANSACTION_CODE,
        POL.REFERENCE_NUM,
        POL.ATTRIBUTE_CATEGORY,
        POL.ATTRIBUTE1,
        POL.ATTRIBUTE2,
        POL.ATTRIBUTE3,
        POL.ATTRIBUTE4,
        POL.ATTRIBUTE5,
        POL.ATTRIBUTE6,
        POL.ATTRIBUTE7,
        POL.ATTRIBUTE8,
        POL.ATTRIBUTE9,
        POL.ATTRIBUTE10,
        POL.ATTRIBUTE11,
        POL.ATTRIBUTE12,
        POL.ATTRIBUTE13,
        POL.ATTRIBUTE14,
        POL.ATTRIBUTE15,
        NVL(POL.UNIT_PRICE,0) * NVL(POL.QUANTITY,0) AMOUNT,
        DECODE (POL.item_id, NULL, MUOM1.UOM_CLASS, MUOM2.UOM_CLASS) UOM_CLASS,
        POLC1.DISPLAYED_FIELD,
        POLC2.DISPLAYED_FIELD,
        MSI.ALLOWED_UNITS_LOOKUP_CODE,
        MSI.OUTSIDE_OPERATION_UOM_TYPE,
        POL.GLOBAL_ATTRIBUTE_CATEGORY,
        POL.GLOBAL_ATTRIBUTE1,
        POL.GLOBAL_ATTRIBUTE2,
        POL.GLOBAL_ATTRIBUTE3,
        POL.GLOBAL_ATTRIBUTE4,
        POL.GLOBAL_ATTRIBUTE5,
        POL.GLOBAL_ATTRIBUTE6,
        POL.GLOBAL_ATTRIBUTE7,
        POL.GLOBAL_ATTRIBUTE8,
        POL.GLOBAL_ATTRIBUTE9,
        POL.GLOBAL_ATTRIBUTE10,
        POL.GLOBAL_ATTRIBUTE11,
        POL.GLOBAL_ATTRIBUTE12,
        POL.GLOBAL_ATTRIBUTE13,
        POL.GLOBAL_ATTRIBUTE14,
        POL.GLOBAL_ATTRIBUTE15,
        POL.GLOBAL_ATTRIBUTE16,
        POL.GLOBAL_ATTRIBUTE17,
        POL.GLOBAL_ATTRIBUTE18,
        POL.GLOBAL_ATTRIBUTE19,
        POL.GLOBAL_ATTRIBUTE20,
        POL.EXPIRATION_DATE,
        POL.TAX_CODE_ID,
        POL.QC_GRADE,
        POL.BASE_UOM,
        POL.BASE_QTY,
        POL.SECONDARY_UOM,
        POL.SECONDARY_QTY,
        POL.OKE_CONTRACT_HEADER_ID,
        POL.OKE_CONTRACT_VERSION_ID,
        POL.SECONDARY_UNIT_OF_MEASURE,
        POL.SECONDARY_QUANTITY,
        POL.PREFERRED_GRADE,
        POL.AUCTION_HEADER_ID,
        POL.AUCTION_DISPLAY_NUMBER,
        POL.AUCTION_LINE_NUMBER,
        POL.BID_NUMBER,
        POL.BID_LINE_NUMBER,
        POL.SUPPLIER_REF_NUMBER,
        POL.CONTRACT_ID,
        POL.JOB_ID,
        POL.START_DATE,
        POL.CONTRACTOR_FIRST_NAME,
        POL.CONTRACTOR_LAST_NAME,
        PLTB.PURCHASE_BASIS,
        PLTB.MATCHING_BASIS,
        POL.FROM_LINE_LOCATION_ID,
        POL.BASE_UNIT_PRICE,
        POL.MANUAL_PRICE_CHANGE_FLAG,
        DECODE (MSI.TRACKING_QUANTITY_IND,
            'PS', MSI.SECONDARY_DEFAULT_IND,
            NULL),
        DECODE (MSI.TRACKING_QUANTITY_IND, 'PS', MSI.SECONDARY_UOM_CODE, NULL),
        MSI.GRADE_CONTROL_FLAG,
        POL.ORG_ID
        FROM PO_LINE_TYPES_B PLTB,
        PO_LINE_TYPES_TL PLTT,
        MTL_UNITS_OF_MEASURE MUOM1,
        MTL_UNITS_OF_MEASURE MUOM2,
        PO_UN_NUMBERS_TL POUN,
        PO_HAZARD_CLASSES_TL PHC,
        PO_LOOKUP_CODES POLC1,
        PO_LOOKUP_CODES POLC2,
        MTL_SYSTEM_ITEMS MSI,
        MTL_SYSTEM_ITEMS_TL MSIT,
        PO_LINES_ALL POL,
        MTL_CATEGORIES_B MCB,
        MTL_CATEGORY_SETS_B MCSB,
        MTL_CATEGORY_SETS_TL MCST 
 WHERE  POL.LINE_TYPE_ID = PLTB.LINE_TYPE_ID(+)
        AND POL.LINE_TYPE_ID = PLTT.LINE_TYPE_ID(+)
        AND PLTT.LANGUAGE(+) = USERENV ('LANG')
        AND MSI.INVENTORY_ITEM_ID(+) = POL.ITEM_ID
        AND MSI.ORGANIZATION_ID(+) =
                PO_LINES_SV4.get_inventory_orgid (POL.org_id)
        AND MUOM1.UNIT_OF_MEASURE(+) = POL.UNIT_MEAS_LOOKUP_CODE
        AND MUOM2.UNIT_OF_MEASURE(+) = MSI.PRIMARY_UNIT_OF_MEASURE
        AND POUN.UN_NUMBER_ID(+) = POL.UN_NUMBER_ID
        AND POUN.LANGUAGE(+) = USERENV ('LANG')
        AND PHC.HAZARD_CLASS_ID(+) = POL.HAZARD_CLASS_ID
        AND PHC.LANGUAGE(+) = USERENV ('LANG')
        AND POLC1.LOOKUP_TYPE(+) = 'PRICE TYPE'
        AND POLC1.LOOKUP_CODE(+) = POL.PRICE_TYPE_LOOKUP_CODE
        AND POLC2.LOOKUP_TYPE(+) = 'TRANSACTION REASON'
        AND POLC2.LOOKUP_CODE(+) = POL.TRANSACTION_REASON_CODE
        AND MSI.INVENTORY_ITEM_ID = MSIT.INVENTORY_ITEM_ID(+)
        AND MSI.ORGANIZATION_ID = MSIT.ORGANIZATION_ID(+)
        AND MSIT.LANGUAGE(+) = USERENV ('LANG')
        AND MCB.STRUCTURE_ID = MCSB.STRUCTURE_ID
        AND MCSB.CATEGORY_SET_ID = MCST.CATEGORY_SET_ID
        AND MCST.CATEGORY_SET_NAME = 'Jimway PO Category'
        AND (MCB.DISABLE_DATE IS NULL OR MCB.DISABLE_DATE > SYSDATE)
        AND POL.CATEGORY_ID = MCB.CATEGORY_ID
        AND POL.PO_HEADER_ID = :po_header_id
    """
    return execute_query(query=query, fetch='all', bind_vars=bind_vars)

def get_po_price_change_stage():
    query = """
        SELECT * FROM XXPO_PO_PRICE_CHANGE_STAGE
    """
    return execute_query(query=query, fetch='all')